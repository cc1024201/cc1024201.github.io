<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://cc1024201.github.io</id>
    <title>zhcao.blog</title>
    <updated>2021-06-08T13:38:47.201Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://cc1024201.github.io"/>
    <link rel="self" href="https://cc1024201.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://cc1024201.github.io/images/avatar.png</logo>
    <icon>https://cc1024201.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, zhcao.blog</rights>
    <entry>
        <title type="html"><![CDATA[反转链表]]></title>
        <id>https://cc1024201.github.io/post/fan-zhuan-lian-biao/</id>
        <link href="https://cc1024201.github.io/post/fan-zhuan-lian-biao/">
        </link>
        <updated>2021-06-08T13:13:50.000Z</updated>
        <content type="html"><![CDATA[<h1 id="描述">描述</h1>
<p>输入一个链表，反转链表后，输出链表的表头</p>
<h1 id="示例1">示例1</h1>
<blockquote>
<p>输入：{1，2，3}<br>
返回值：{3，2，1}</p>
</blockquote>
<h2 id="方法一构造链表">方法一：构造链表</h2>
<p>可以先用一个按照插入顺序排序的集合将单链表每个节点都存起来，然后再构造链表<br>
此方法简单易懂</p>
<pre><code class="language-java">/*
public class ListNode {
    int val;
    ListNode next = null;

    ListNode(int val) {
        this.val = val;
    }
}*/
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class Solution {
    public ListNode ReverseList(ListNode head) {
        if (null == head) {
            return null;
        }
        List&lt;ListNode&gt; list = new ArrayList&lt;&gt;();
        while (head != null) {
            list.add(head);
            head = head.next;
        }
        Collections.reverse(list);
        for (ListNode node : list) {
            node.next = null;
        }
        head = list.get(0);
        list.remove(0);
        ListNode currentNode = head;
        while (list.size() &gt; 0) {
            currentNode.next = list.get(0);
            list.remove(0);
            currentNode = currentNode.next;
        }
        return head;
    }
}
</code></pre>
<h2 id="方法二正规解法">方法二：正规解法</h2>
<p>此题想考察的的是：如何调整链表指针，来达到反转链表的目的。</p>
<ol>
<li>初始化：3个指针
<ul>
<li>pre指向已经反转好的链表的最后一个节点，最开始没有反转，所以为null</li>
<li>cur指向待反转链表的第一个节点，最开始第一个节点待反转，所以为head</li>
<li>nex指向待反转链表的第二个节点，目的是保存链表，因为cur改变指向后，后面的链表会失效，所以需要保存</li>
</ul>
</li>
<li>循环执行以下三个操作
<ul>
<li>nex = cur.next, 保存作用</li>
<li>cur.next = pre，没有反转的链表的第一个节点的下个节点是已反转链表的最后一个节点（在此完成反转）</li>
<li>pre = cur, cur = nex; 指针后移， 操作下一个未反转链表的第一个节点</li>
</ul>
</li>
</ol>
<pre><code class="language-java">/*
public class ListNode {
  int val;
  ListNode next = null;

  ListNode(int val) {
      this.val = val;
  }
}*/
public class Solution {
  public ListNode ReverseList(ListNode head) {
      ListNode pre = null;
      ListNode cur = head;
      ListNode nex = null;
      while (null != cur) {
          nex = cur.next; //记录当前节点的下一个节点位置
          cur.next = pre; //让当前节点指向前一个节点位置，完成反转
          pre = cur; //pre往右走
          cur = nex; //当前节点往右走
      }
      return pre;
  }
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[阿里云 Spring Boot 脚手架]]></title>
        <id>https://cc1024201.github.io/post/a-li-yun-spring-boot-jiao-shou-jia/</id>
        <link href="https://cc1024201.github.io/post/a-li-yun-spring-boot-jiao-shou-jia/">
        </link>
        <updated>2021-05-26T15:23:31.000Z</updated>
        <content type="html"><![CDATA[<p>https://start.aliyun.com/</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello World]]></title>
        <id>https://cc1024201.github.io/post/about/</id>
        <link href="https://cc1024201.github.io/post/about/">
        </link>
        <updated>2019-01-25T11:09:48.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>欢迎来到我的小站呀，很高兴遇见你！🤝</p>
</blockquote>
<h2 id="关于本站">🏠 关于本站</h2>
<h2 id="博主是谁">👨‍💻 博主是谁</h2>
<h2 id="兴趣爱好">⛹ 兴趣爱好</h2>
<h2 id="联系我呀">📬 联系我呀</h2>
]]></content>
    </entry>
</feed>